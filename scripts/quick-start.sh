#!/bin/bash

echo "üöÄ FIGMA TO REACT CONVERTER - GYORS IND√çT√ÅS"
echo "============================================="

# Sz√≠nek defini√°l√°sa
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# F√ºggv√©ny a l√©p√©sek jelz√©s√©re
print_step() {
    echo -e "${BLUE}[L√âP√âS $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Ellen≈ërizz√ºk, hogy Node.js telep√≠tve van-e
print_step "1" "Node.js verzi√≥ ellen≈ërz√©se..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_success "Node.js telep√≠tve: $NODE_VERSION"
else
    print_error "Node.js nincs telep√≠tve! Telep√≠tse a https://nodejs.org oldalr√≥l"
    exit 1
fi

# 2. Ellen≈ërizz√ºk, hogy npm telep√≠tve van-e
print_step "2" "npm verzi√≥ ellen≈ërz√©se..."
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_success "npm telep√≠tve: $NPM_VERSION"
else
    print_error "npm nincs telep√≠tve!"
    exit 1
fi

# 3. F√ºgg≈ës√©gek telep√≠t√©se
print_step "3" "F√ºgg≈ës√©gek telep√≠t√©se..."
if npm install; then
    print_success "F√ºgg≈ës√©gek sikeresen telep√≠tve"
else
    print_error "Hiba a f√ºgg≈ës√©gek telep√≠t√©se sor√°n"
    exit 1
fi

# 4. .env.local f√°jl ellen≈ërz√©se
print_step "4" ".env.local f√°jl ellen≈ërz√©se..."
if [ -f ".env.local" ]; then
    print_success ".env.local f√°jl megtal√°lva"
else
    print_warning ".env.local f√°jl nem tal√°lhat√≥"
    echo "M√°solja az .env.example f√°jlt .env.local n√©ven:"
    echo "cp .env.example .env.local"
    echo "Majd t√∂ltse ki a sz√ºks√©ges API kulcsokat!"
fi

# 5. K√∂rnyezeti v√°ltoz√≥k valid√°l√°sa
print_step "5" "K√∂rnyezeti v√°ltoz√≥k valid√°l√°sa..."
if node scripts/validate-environment.js; then
    print_success "K√∂rnyezeti v√°ltoz√≥k rendben"
else
    print_warning "K√∂rnyezeti v√°ltoz√≥k hi√°nyosak - ellen≈ërizze a .env.local f√°jlt"
fi

# 6. TypeScript ellen≈ërz√©se
print_step "6" "TypeScript t√≠pusok ellen≈ërz√©se..."
if npm run type-check; then
    print_success "TypeScript t√≠pusok rendben"
else
    print_warning "TypeScript t√≠pus hib√°k tal√°lhat√≥k"
fi

# 7. Fejleszt≈ëi szerver ind√≠t√°sa
print_step "7" "Fejleszt≈ëi szerver ind√≠t√°sa..."
echo ""
echo "üéâ MINDEN K√âSZ!"
echo "==============="
echo ""
echo "A szerver ind√≠t√°s√°hoz futtassa:"
echo -e "${GREEN}npm run dev${NC}"
echo ""
echo "Majd nyissa meg a b√∂ng√©sz≈ëben:"
echo -e "${BLUE}http://localhost:3000${NC}"
echo ""
echo "üìã K√ñVETKEZ≈ê L√âP√âSEK:"
echo "1. Szerezzen be Figma Access Token-t"
echo "2. Szerezzen be Groq API kulcsot"
echo "3. T√∂ltse ki a .env.local f√°jlt"
echo "4. Ind√≠tsa el a szervert: npm run dev"
echo ""
echo "üîó HASZNOS LINKEK:"
echo "‚Ä¢ Figma Token: https://figma.com/developers/api#access-tokens"
echo "‚Ä¢ Groq API: https://console.groq.com/"
echo "‚Ä¢ Dokument√°ci√≥: README.md"
echo ""

# Opcion√°lisan automatikusan ind√≠tsa a szervert
read -p "Szeretn√© most elind√≠tani a fejleszt≈ëi szervert? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_step "8" "Szerver ind√≠t√°sa..."
    npm run dev
fi
